package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, PRINT, READ;
terminal RETURN, VOID, CONST, NEW;
terminal CLASS, EXTENDS;
terminal WHILE, FOREACH, CONTINUE, BREAK;
terminal IF, ELSE;
terminal PLUS, MINUS, PLUSINCR, MINUSDECR;
terminal MULTIPLE,DIVIDE, MOD;
terminal EQUAL, EQUALEQUAL, DIFF;
terminal MORE, LESS, MOREEQUAL, LESEQUAL;
terminal AND, OR;
terminal COLON, SEMI, COMMA;
terminal LEFTSQPAR, RIGHTSQPAR, LPAREN, RPAREN, LBRACE, RBRACE;
terminal Integer INT;
terminal Character CHAR;
terminal Integer BOOL;
terminal String IDENT;

nonterminal declaration_list, declaration_part;
nonterminal const_dec, const_decl_list, const_declaration_part, const_to_print;
nonterminal var_dec, var_list, var_part;
nonterminal method_dec, main_variables;
nonterminal statements_list, statement; 
nonterminal designator_statement;
nonterminal expr, ident_expr_list, add_sub_OP, mull_div_mod_OP, assign;
nonterminal term_list, term, factor_list, factor;

nonterminal rs.etf.pp1.symboltable.concepts.Obj prog_id, program, main;
nonterminal rs.etf.pp1.symboltable.concepts.Obj designator, ident_expr_list;
nonterminal rs.etf.pp1.symboltable.concepts.Struct type;



program ::= (Program) PROG prog_id:o declaration_list LBRACE method_dec RBRACE;

prog_id ::= (Prog_id) IDENT: id;

declaration_list ::= (Declarations) declaration_list declaration_part
			   		 |
			  		 (NoDeclarations)/* epsilon */
;

declaration_part ::= (ConstDeclarations) const_dec 
	                 |
	                 (VarDeclarations) var_dec
;
			
const_dec ::= (Const_dec) CONST type:ct const_decl_list SEMI
;

type ::= (Type) IDENT: id
;

const_decl_list ::= (PluralConstIdList) const_decl_list COMMA const_declaration_part
					|
					(SingleConstDeclarationPart) const_declaration_part
;

const_declaration_part ::= (ConstIdInt) IDENT:id EQUAL INT:value 
						   | 
						   (ConstIdBool) IDENT:id EQUAL  BOOL:value 
						   | 
					       (ConstIdChar) IDENT:id EQUAL  CHAR:value 
;
var_dec ::= (Var_dec) type:t var_list SEMI
;
var_list ::= (MultipleVarIdList) var_list COMMA var_part
			 |
			 (SingleVarIdList) var_part
;
var_part ::= (VarId) IDENT: id
			 |
			 (VarOrArrayId) IDENT:id LEFTSQPAR RIGHTSQPAR
;
method_dec ::= (MainMethod) VOID main LPAREN RPAREN main_variables LBRACE statements_list RBRACE
;

main ::= (MainIdent)IDENT:name_main
;

main_variables ::= (MainVariables) main_variables var_dec
					|
				   (NoMainVariables) /* epislon */
;
statements_list ::= (Statements) statements_list statement
					|
					(NoStatements) /* epsilon */
;
statement ::= (DesignatorStatement) designator_statement SEMI
			  |
			  (Print) PRINT LPAREN expr:t const_to_print RPAREN SEMI
			  |
			  (Read)  READ  LPAREN designator:d RPAREN SEMI	
			  |
			  (ReturnNull) RETURN SEMI	  
			  |
			  error SEMI:l
			  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
;
const_to_print ::= (ConstToPrint) COMMA INT /* promeniti */
				   |
				   (NoConstToPrint) /* epsilon */
;
designator_statement ::= (Assignment) designator:o assign expr:t
						 |
						 (Increment) designator:d PLUSINCR 
						 |
						 (Decrement) designator:d MINUSDECR
;
assign ::= (AssignOp) EQUAL
;
designator ::= (Designator) ident_expr_list:o
;
ident_expr_list ::= (ArrayDesignator) ident_expr_list:o LEFTSQPAR expr RIGHTSQPAR
					|
					(SimpleDesignator) IDENT:id
;
expr ::= (Expr) term_list:t
;
term_list  ::=  (AddExpr) term_list add_sub_OP term
	            |
	            (TermExpr) term:t
;
term ::= (Term) factor_list:t
;
factor_list ::= (MulopFactor) factor_list:t mull_div_mod_OP factor
	            |
	            (SimpleFactor) factor:t 
                |
                (MinusFactor) MINUS factor
;
factor ::= (VarRef) designator:o 
           |
           (ArrayRef) designator:o LPAREN RPAREN      /*navodno visak*/
           |
           (IntRef) INT:i           
           |
           (CharRef) CHAR:c
           |
           (BoolRef) BOOL:b 
           |
           (OperatorNew) NEW type:t LEFTSQPAR expr:t1 RIGHTSQPAR
           |
           (ParenthesisExpr) LPAREN expr:t RPAREN
;
add_sub_OP ::= (PlusOP) PLUS
			   |
			   (MinusOP) MINUS
;
mull_div_mod_OP ::= (MullOP) MULTIPLE
				    |
				    (DivOP) DIVIDE
				    |
				    (ModOP) MOD
;

