// generated with ast extension for cup
// version 0.8
// 14/0/2024 17:6:35


package rs.ac.bg.etf.pp1.ast;

public class Program implements SyntaxNode {

    private SyntaxNode parent;
    private int line;
    public rs.etf.pp1.symboltable.concepts.Obj obj = null;

    private Prog_id prog_id;
    private Namespace_list namespace_list;
    private Declaration_list declaration_list;
    private Method_dec method_dec;

    public Program (Prog_id prog_id, Namespace_list namespace_list, Declaration_list declaration_list, Method_dec method_dec) {
        this.prog_id=prog_id;
        if(prog_id!=null) prog_id.setParent(this);
        this.namespace_list=namespace_list;
        if(namespace_list!=null) namespace_list.setParent(this);
        this.declaration_list=declaration_list;
        if(declaration_list!=null) declaration_list.setParent(this);
        this.method_dec=method_dec;
        if(method_dec!=null) method_dec.setParent(this);
    }

    public Prog_id getProg_id() {
        return prog_id;
    }

    public void setProg_id(Prog_id prog_id) {
        this.prog_id=prog_id;
    }

    public Namespace_list getNamespace_list() {
        return namespace_list;
    }

    public void setNamespace_list(Namespace_list namespace_list) {
        this.namespace_list=namespace_list;
    }

    public Declaration_list getDeclaration_list() {
        return declaration_list;
    }

    public void setDeclaration_list(Declaration_list declaration_list) {
        this.declaration_list=declaration_list;
    }

    public Method_dec getMethod_dec() {
        return method_dec;
    }

    public void setMethod_dec(Method_dec method_dec) {
        this.method_dec=method_dec;
    }

    public SyntaxNode getParent() {
        return parent;
    }

    public void setParent(SyntaxNode parent) {
        this.parent=parent;
    }

    public int getLine() {
        return line;
    }

    public void setLine(int line) {
        this.line=line;
    }

    public void accept(Visitor visitor) {
        visitor.visit(this);
    }

    public void childrenAccept(Visitor visitor) {
        if(prog_id!=null) prog_id.accept(visitor);
        if(namespace_list!=null) namespace_list.accept(visitor);
        if(declaration_list!=null) declaration_list.accept(visitor);
        if(method_dec!=null) method_dec.accept(visitor);
    }

    public void traverseTopDown(Visitor visitor) {
        accept(visitor);
        if(prog_id!=null) prog_id.traverseTopDown(visitor);
        if(namespace_list!=null) namespace_list.traverseTopDown(visitor);
        if(declaration_list!=null) declaration_list.traverseTopDown(visitor);
        if(method_dec!=null) method_dec.traverseTopDown(visitor);
    }

    public void traverseBottomUp(Visitor visitor) {
        if(prog_id!=null) prog_id.traverseBottomUp(visitor);
        if(namespace_list!=null) namespace_list.traverseBottomUp(visitor);
        if(declaration_list!=null) declaration_list.traverseBottomUp(visitor);
        if(method_dec!=null) method_dec.traverseBottomUp(visitor);
        accept(visitor);
    }

    public String toString(String tab) {
        StringBuffer buffer=new StringBuffer();
        buffer.append(tab);
        buffer.append("Program(\n");

        if(prog_id!=null)
            buffer.append(prog_id.toString("  "+tab));
        else
            buffer.append(tab+"  null");
        buffer.append("\n");

        if(namespace_list!=null)
            buffer.append(namespace_list.toString("  "+tab));
        else
            buffer.append(tab+"  null");
        buffer.append("\n");

        if(declaration_list!=null)
            buffer.append(declaration_list.toString("  "+tab));
        else
            buffer.append(tab+"  null");
        buffer.append("\n");

        if(method_dec!=null)
            buffer.append(method_dec.toString("  "+tab));
        else
            buffer.append(tab+"  null");
        buffer.append("\n");

        buffer.append(tab);
        buffer.append(") [Program]");
        return buffer.toString();
    }
}
